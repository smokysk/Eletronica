// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2021 18:50:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    comparator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module comparator_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module comparator_vlg_check_tst (
	Igual,
	Maior,
	Menor,
	sampler_rx
);
input  Igual;
input  Maior;
input  Menor;
input sampler_rx;

reg  Igual_expected;
reg  Maior_expected;
reg  Menor_expected;

reg  Igual_prev;
reg  Maior_prev;
reg  Menor_prev;

reg  Igual_expected_prev;
reg  Maior_expected_prev;
reg  Menor_expected_prev;

reg  last_Igual_exp;
reg  last_Maior_exp;
reg  last_Menor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Igual_prev = Igual;
	Maior_prev = Maior;
	Menor_prev = Menor;
end

// update expected /o prevs

always @(trigger)
begin
	Igual_expected_prev = Igual_expected;
	Maior_expected_prev = Maior_expected;
	Menor_expected_prev = Menor_expected;
end



// expected Igual
initial
begin
	Igual_expected = 1'bX;
end 

// expected Maior
initial
begin
	Maior_expected = 1'bX;
end 

// expected Menor
initial
begin
	Menor_expected = 1'bX;
end 
// generate trigger
always @(Igual_expected or Igual or Maior_expected or Maior or Menor_expected or Menor)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Igual = %b | expected Maior = %b | expected Menor = %b | ",Igual_expected_prev,Maior_expected_prev,Menor_expected_prev);
	$display("| real Igual = %b | real Maior = %b | real Menor = %b | ",Igual_prev,Maior_prev,Menor_prev);
`endif
	if (
		( Igual_expected_prev !== 1'bx ) && ( Igual_prev !== Igual_expected_prev )
		&& ((Igual_expected_prev !== last_Igual_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Igual :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Igual_expected_prev);
		$display ("     Real value = %b", Igual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Igual_exp = Igual_expected_prev;
	end
	if (
		( Maior_expected_prev !== 1'bx ) && ( Maior_prev !== Maior_expected_prev )
		&& ((Maior_expected_prev !== last_Maior_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Maior :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Maior_expected_prev);
		$display ("     Real value = %b", Maior_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Maior_exp = Maior_expected_prev;
	end
	if (
		( Menor_expected_prev !== 1'bx ) && ( Menor_prev !== Menor_expected_prev )
		&& ((Menor_expected_prev !== last_Menor_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Menor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Menor_expected_prev);
		$display ("     Real value = %b", Menor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Menor_exp = Menor_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module comparator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
// wires                                               
wire Igual;
wire Maior;
wire Menor;

wire sampler;                             

// assign statements (if any)                          
comparator i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Igual(Igual),
	.Maior(Maior),
	.Menor(Menor)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

comparator_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

comparator_vlg_check_tst tb_out(
	.Igual(Igual),
	.Maior(Maior),
	.Menor(Menor),
	.sampler_rx(sampler)
);
endmodule

